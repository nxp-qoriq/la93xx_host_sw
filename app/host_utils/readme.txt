# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2024 NXP
####################################################################

############################################################
# apm-iqplayer*.eld VSPA firmware and associated utilities
# linux user space utilities:
#   > iq_mon : statistic monitoring showing traffic in various dma/fifos
#   > iq_app : showing how to send/receive traffic
#   > iq_streamer : agent transfering dmem buffer using host dma (instead of vspa dma)
#   > and various linux shell script to start/stop transfers ./iq-replay.sh, ./iq-capture.sh, ./iq-stop.sh
###################################################

################################################################################
## Basic use case 1 : “How to transmit/receive waveform from/to binary files ?”
################################################################################
#  apm-iqplayer*.eld VSPA firmware enables iq reaceive/transmit 
#  control start/stop/buffers rely on vspa mailbox messages  
#  Only external config required is phytimer tx/rx allowed which is done by default in load-nlm.sh
#  vspa will write mirrored dmem value to avoid PCI read from host
#  A set of shell script are used to prepare and send mailbox messages
#  The scripts configure buffers in iqflood with following asumption allowing tx/rx:
#  First half of iqflood region is used for Tx buffers, seconf half for receive buffers
#  For multiple Rx, same script is used starting all channels with buffer passed used as [buff0|buff1|buff2|buff3]  
#  By design, vspa firmware is also using last 256 bytes of iqflood as shared vspa dmem proxy 
#  by default /lib/apm-iqplayer.eld which is 1T1R firmware is used
#  need to replace it with apm-iqplayer-2R.eld or apm-iqplayer-4R.eld for multi channel usecases
#  by convention buffer size paseed to script are nb of 4KB block

# load and start VSPA firmware
 ./load-nlm.sh

# confugre RF (optional for axiq loopback or breakout card)
 ./config_run_rf.sh limetx
 ./config_run_rf.sh limerx

# digital/axiq loopback using dfe app control 
# Need la9310 M4 to write DBGGENCR reg not accessible over PCI
 mount -t hugetlbfs none /dev/hugepages
 echo 24 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
 dpdk-dfe_app -c "axiq_lb enable"

# play (repeat) waveform from file 
 ./iq-replay.sh ./tone_td_3p072Mhz_20ms_4KB1200_2c.bin 1200

# capture (one time) iq samples into file
 ./iq-capture.sh ./iqdata.bin 300

# capture (repeat) in DDR buffer 
 ./iq-capture-ddr.sh 300
 ./iq-stop.sh
 bin2mem -f 300 -a 0x9CC00000 -r 1228800

# play singletone (generated by vspa)
 ./singleTone.sh 20 1 

# Select granita channels
 ./rx-chan.sh 0
 ./rx-chan.sh 1

# get vspa stats (in a second/dedicated ssh shell)
 iq_mon

#clear vspa stats
 ./stats.sh -1

#clear host stats
 ./iq_mon -c

# get vspa trace
 iq_streamer -d

#############################################################################################
## Basic use case 2 : “How to send/receive iq samples from linux user space app ?”
#############################################################################################
# iqplayer vspa firmware provide necessary handshake and flow control to connect an user app  
# The DDR tx/rx buffer passed to VSPA becomes Rx/Tx fifos and a library lib_iqplayer provides
# necessary routines to send and receive iq_samples
# iq_app example is provided. This app will play/capture large files in memory
# by default scripts provided is configuring 32KB fifos in DDR and playing/capturing large file
# here asumption used in script example  
# RFNM IQFLOOD Buff:0xb0001000[H]-0x96400000[M],size 218103808 (0xD000000)
# hardcoded 
#    VSPA PROXY at 0xA33FFC00 i.e IQFLOOD + SIZE IQFLOOD - 1KB
# configured  
#    TX FIFO 32KB     0x96400000
#    TX FILE 4KB1200  0x96500000
#    RX FIFO 32KB     0x9CC00000
#    TX FILE 4KB1200  0x9CD00000

## iq_app Tx use case 

 1> load tx source large file
 2> start tx app, passing offset and size in IQFLOOD for source large file and Tx FIFO
 3> start VSPA tx on the 32KB FIFO
 4> stop 

   bin2mem  -f ./tone_td_3p072Mhz_20ms_4KB1200_2c.bin -a 0x96500000
   taskset 0x8 iq_app -t -a 0x00100000 4915200 -f 0x00000000 32768 &
   ./iq-start-txfifo.sh 8
   ./iq-stop.sh

## iq_app Rx use case  

 1> start rx app, passing offset in IQFLOOD for dest file and Rx FIFO
 2> start VSPA rx on the 32KB FIFO
 3> stop tx and rx
 4> dump received file
 
   taskset 0x4 iq_app -r -c 0 -a 0x6900000 4915200 -f 0x6800000 32768 &
   ./iq-start-rxfifo.sh 8
   ./iq-stop.sh
   bin2mem -f iqdata.bin -a 0x9CD00000 -r 4915200

## get iq_streamer trace

  kill -USR1 <iq_streamer PID>


#############################################################################################
## Advanced use case 1 : “How to send/receive iq samples at 122.88MSPS ?”
#############################################################################################
# By default load-nlm.sh configure 61.44MSPS. Issuing "./load-nlm.sh 1" will set l22.88 MSPS TX/RX  
# no change on iq-capture.sh, but one change on iq-reaplay.sh which
# needs to pass additional parameter "1" to set the "half duplex" mode 
# It will use mBurst config to increase xfer throuput 
# But it is no more possible to do both TX and RX at the same time wiht current code

  ./iq-replay.sh ./tone_td_3p072Mhz_20ms_4KB1200_2c.bin 1200 1
  ./iq-capture.sh ./iqdata.bin 300 
  ./iq-capture-ddr.sh 300 

#############################################################################################
## Advanced use cases 2 : “How to support higher sampling rate ? (160MSPS) ?”
#############################################################################################
# iqplayer vspa firmware provide an doption to disable DDR DMAs and let external DMAs to move 
# samples from/to dmem to/from DDR. Using imx8mplus edma allows to reach higher performance
# compare to VSPA DMAs. This support is experimental and provided as examples.
# iq_streamer linux app and M7 firmware are provided to drive edma as VSPA external DMA agent
# iq_streamer can by started as Tx or/and Rx agent, or can control M7 firmware to play role of Rx/Tx agent 
# When using linux user space agent, there are strong real time constraints to keep pace with the DMEM FIFO. . 
# iq_streamer supports this mode but can only sustain 375MB/s when running in linux user space with isolcu/noHz, this would need to move to i.mx8 M7 core to reach max throughput. Proven to work in RFNM firmware.   
# The way to start this “ext DMA” mode is to start the agent by doing “taskset 0x8 iq_streamer -t &” or/and “taskset 0x4 iq_streamer -r &”. 
# The agents will update VSPA shared flag RX/TX_ext_dma_enabled, indicating VSPA to skip VSPA DMA and let agent to managed DMEM FIFOs.
# M7 agent can only do rx or tx at a time. 

## start linux user space dma agent rx
  taskset 0x4 iq_streamer -r &
  ./iq-capture-ddr.sh 1200

## start linux user space dma agent tx
  taskset 0x8 iq_streamer -t &
  ./iq-replay.sh ./tone_td_3p072Mhz_20ms_4KB1200_2c.bin 1200

## load M7 firmware
  ./startM7.sh

## start M7 dma agent rx
  iq_streamer -r -M &
  ./iq-capture-ddr.sh 1200

## start M7 dma agent tx
  iq_streamer -t -M &
  ./iq-replay.sh ./tone_td_3p072Mhz_20ms_4KB1200_2c.bin 1200

## stop 
  ./iq-stop.sh

## get iq_streamer trace
  kill -USR1 <iq_streamer PID>
  
#############################################
## supported usecases 

 |   Sampling rate 		  + linux iq_app (vspa dma)	+ iq_streamer linux (edma)	+ iq_streamer M7 (edma)	+
 | full duplex 61.44MSPS  |			ok				|			ok 				|    	ok				| 
 | half duplex 122.88MSPS |			~ok				|			ok				|    	ok				|
 | full duplex 122.88MSPS |			nok				|			~ok				|    	~ok				|
 (~ok): working but see some axiq fifo underrun/overflow i.e. some level of sample drop 


#############################################
## Next steps :

 •	debug full duplex 122.88MSPS
 •	use overlay instead of multiple VSPA images
 •	add buffer metadata transfer such as time stamp


##########################
### debug tips and tricks 

iq_streamer DMA agents requires hard real time , hence proper isolcpu
----------------------------------------------------------------------

 root@imx8mp-rfnm:~# dmesg |grep iso
 [    0.000000] Kernel command line: console=ttymxc1,115200 root=/dev/mmcblk1p2 rootwait rw isolcpus=2-3 nohz_full=2-3 irqaffinity=0 cpuidle.off=1 cpufreq.off=1

 root@imx8mp-rfnm:~# zcat /proc/config.gz |grep NO_HZ
 CONFIG_NO_HZ_FULL=y

 root@imx8mp-rfnm:~# zcat /proc/config.gz |grep RCU_NOCB_CPU
 CONFIG_RCU_NOCB_CPU=y

iMX PCI DMA registers
---------------------
 dma rx
  memtool -32  0x33b80300 10
 dma tx
  memtool -32  0x33b80200 10
 
check ADC/DAC clock
-------------------
  memtool -32 0x19040300 1
  00010303 -> 61.44Mhz
  00000000 -> 122.88Mhz

vspa_dmem_proxy
----------------
 memtool -32 0xA33FFC00 80


Steps to Generate vspa_exported_symbols.h vspa_trace_enum.h from apm-iqplayer.eld
---------------------------------------------------------------------------------
cd iq_streamer
./vspa_symbols_extract.sh ../fw_iqplayer/apm-iqplayer.eld 

copy the include/l1-trace.h to iq_streamer direcory
./vspa_trace_code_extract.sh


DDR Proxy region dump 
----------------------

typedef struct s_vspa_dmem_proxy {
	t_tx_ch_host_proxy  tx_state_readonly; 
	t_rx_ch_host_proxy  rx_state_readonly[RX_NUM_MAX_CHAN];
	t_stats vspa_stats; 
	t_stats host_stats; 
} t_vspa_dmem_proxy;


root@imx8mp-rfnm:~/host-utils#  memtool -32 0xA33FFc00 100
0xA33FFC00:  583B3000 583B4000 DEADBEEF 004B0000  <- t_tx_ch_host_proxy  
0xA33FFC10:  00000000 00000000 00000000 00000000
0xA33FFC20:  00000000 00000000 00000000 00000000
0xA33FFC30:  00000000 00000000 00000000 00000000
0xA33FFC40:  D7B04800 D7B04000 B6801000 004B0000  <- t_rx_ch_host_proxy  
0xA33FFC50:  00000000 00000000 DEADBEEF 00000001
0xA33FFC60:  00000000 00000000 DEADBEEF 00000002
0xA33FFC70:  00000000 00000000 DEADBEEF 00000003
0xA33FFC80:  00000000 00000000 00000000 00000000  gbl    <- t_stats vspa_stats
0xA33FFC90:  00000000 00000000 00000000 00000000
0xA33FFCA0:  00000000 00000000 00000000 00000000
0xA33FFCB0:  00000000 00000000 00000000 00000000
0xA33FFCC0:  013DB101 00000000 00000000 00004C29  TX
0xA33FFCD0:  00000D43 00000000 00000000 00000000
0xA33FFCE0:  00000000 00000000 00000000 00000000
0xA33FFCF0:  00000000 00000000 00000000 00000000
0xA33FFD00:  0EE82D29 001B71ED 00000000 0001BD55  RX0
0xA33FFD10:  00000000 0000D904 00000000 00000000
0xA33FFD20:  00000000 00000000 00000000 00000000  RX1
0xA33FFD30:  00000000 00000000 00000000 00000000
0xA33FFD40:  00000000 00000000 00000000 00000000  RX2
0xA33FFD50:  00000000 00000000 00000000 00000000
0xA33FFD60:  00000000 00000000 00000000 00000000  RX3
0xA33FFD70:  00000000 00000000 00000000 00000000
0xA33FFD80:  00000000 0F29A394 00000000 00000000  gbl    <- t_stats host_stats
0xA33FFD90:  00000000 00000000 00000000 00000000
0xA33FFDA0:  00000000 00000000 00000000 00000000
0xA33FFDB0:  00000000 00000000 00000000 00000000
0xA33FFDC0:  00000000 20000000 039DD243 00000000  Tx
0xA33FFDD0:  00000000 00000000 00000000 00000000
0xA33FFDE0:  40000000 00000000 0000000C 00000000
0xA33FFDF0:  00000000 00000000 10000000 00000000
0xA33FFE00:  00000000 00000000 0F52022E 00000000  RX0
0xA33FFE10:  00000000 00000000 00000000 00000000
0xA33FFE20:  00000000 00000000 00000000 00000000  RX1
0xA33FFE30:  00000000 00000000 00000000 00000000
0xA33FFE40:  00000040 00000000 00000080 00000001  RX2
0xA33FFE50:  00000000 00000000 00001000 00001000
0xA33FFE60:  00000040 00000000 00000000 00000000  RX3
0xA33FFE70:  00000000 00000000 00000080 00000000
0xA33FFE80:  00000000 00000000 00000000 00000000  <-- end proxy
0xA33FFE90:  00000000 00000000 00000000 00000000

